name: RSpec

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.5
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v1
    - uses: masa-iwasaki/setup-rbenv@v1

    - uses: actions/checkout@master
    - uses: nanasess/setup-chromedriver@master

    - name: Cache RBENV_ROOT
      uses: actions/cache@v1
      id: cache_rbenv
      with:
        path: /home/runner/.rbenv
        key: ${{ runner.os }}-rbenv

    - name: Cache Gemfiles
      uses: actions/cache@v1
      id: cache_gemfiles
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gem-


    - name: Get yarn cache
      id: get_yarn_cache
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache yarn
      uses: actions/cache@v1
      id: cache_yarn
      with:
        path: ${{ steps.get_yarn_cache.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Set up rbenv
      run: |
        eval "$(rbenv init -)"
        rbenv install -s `cat .ruby-version`

    - name: Install PostgreSQL 11 Library
      run: |
        sudo apt-get -yqq install libpq-dev

    - name: Setup Rails
      env:
        PGHOST: localhost
        PGUSER: postgres
        RAILS_ENV: test
      run: |
        eval "$(rbenv init -)"
        gem install bundler
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
        bin/rails db:setup
        yarn

    - name: Run Tests
      env:
        PGHOST: localhost
        PGUSER: postgres
        RAILS_ENV: test
        CI: true
        DISPLAY: ':99'
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        eval "$(rbenv init -)"
        bundle exec rspec

    - name: Upload coverage results
      uses: actions/upload-artifact@v1
      if: always()
      with:
        name: coverage-report
        path: coverage

    - name: Notify slack successfully build
      uses: homoluctus/slatify@master
      with:
          type: ${{ job.status }}
          job_name: '*RSpec*'
          mention: 'here'
          mention_if: 'failure'
          channel: '#random'
          url: ${{ secrets.SLACK_WEBHOOK }}
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
